version: 2.1
orbs:
  git-shallow-clone: guitarrapc/git-shallow-clone@1.1.0
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_XMLDOC_MODE: skip
  unity:
    docker:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      - image: gableroux/unity3d:2018.3.12f1-windows
  go:
    docker:
      - image: circleci/golang    
  macos:
    macos:
      xcode: 10.2.0
    environment:
      U3D_HTTP_READ_TIMEOUT: 240
      U3D_HTTP_MAX_RETRIES: 3
jobs:
  # create package for Unity
  build-unity:
    executor: unity
    steps:
      - run: apt update && apt install git -y
      - checkout
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - run: cat Unity_v2018.3.12f1.alf # file name same as image's version
      # get from UNITY_LICENSE envvar(base64 encoded(cat foo.ulf | base64 )), this file is generated from above manual activation
      - run: echo ${UNITY_LICENSE} | base64 -di  >> .circleci/Unity.ulf
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .circleci/Unity.ulf || exit 0
      # Execute scripts(in Linux, currently does not supported IL2CPP so it run on mono)
      - run:
          name: Export unitypackage
          command: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
          working_directory: src/MagicOnion.Client.Unity
      - persist_to_workspace:
          root: ./src/MagicOnion.Client.Unity/
          paths:
            - ./MagicOnion.Client.Unity.unitypackage
  # .NET Core debug/test, release/push
  build-test:
    executor: dotnet
    steps:
      - git-shallow-clone/checkout_shallow
      - run: dotnet build ./src/MagicOnion/ -c Debug
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Debug
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Debug
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Debug
      - run: dotnet build ./src/MagicOnion.Redis/ -c Debug
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Debug
      # - run: dotnet build ./src/MagicOnion.UniversalCodeGenerator/ -c Debug
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Debug
      - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Debug < /dev/null
      - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Debug < /dev/null
  build-push:
    executor: dotnet
    steps:
      - git-shallow-clone/checkout_shallow
      # build .NET Core projects
      - run: dotnet build ./src/MagicOnion/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Redis/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.MSBuild.Tasks/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Generator/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Release -p:VersionPrefix=${CIRCLE_TAG}
      # tests
      # - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Release < /dev/null
      # - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Release < /dev/null
      # pack nuget
      - run: dotnet pack ./src/MagicOnion/MagicOnion.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Abstractions/MagicOnion.Abstractions.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Hosting/MagicOnion.Hosting.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.HttpGateway/MagicOnion.HttpGateway.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Redis/MagicOnion.Redis.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.OpenTelemetry/MagicOnion.OpenTelemetry.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.MSBuild.Tasks/MagicOnion.MSBuild.Tasks.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Generator/MagicOnion.Generator.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      - run: dotnet pack ./src/MagicOnion.Server.Authentication/MagicOnion.Server.Authentication.csproj -c Release --no-build -p:VersionPrefix=${CIRCLE_TAG}
      # publish moc
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r win-x64 -o ./src/MagicOnion.Generator/bin/moc/win-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r linux-x64 -o ./src/MagicOnion.Generator/bin/moc/linux-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r osx-x64 -o ./src/MagicOnion.Generator/bin/moc/osx-x64
      - run: apt update && apt install zip -y
      - run: zip -r moc.zip ./src/MagicOnion.Generator/bin/moc
      - persist_to_workspace:
          root: .
          paths:
            - ./moc.zip
      # push to NuGet Server
      - run: dotnet nuget push ./src/MagicOnion/bin/Release/MagicOnion.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Abstractions/bin/Release/MagicOnion.Abstractions.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Hosting/bin/Release/MagicOnion.Hosting.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.HttpGateway/bin/Release/MagicOnion.HttpGateway.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Redis/bin/Release/MagicOnion.Redis.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.OpenTelemetry/bin/Release/MagicOnion.OpenTelemetry.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.MSBuild.Tasks/bin/Release/MagicOnion.MSBuild.Tasks.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Generator/bin/Release/MagicOnion.Generator.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MagicOnion.Server.Authentication/bin/Release/MagicOnion.Server.Authentication.${CIRCLE_TAG}*.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}

  # upload to github by ghr
  upload-github:
    executor: go
    steps:
      - attach_workspace:
          at: .
      - run: go get github.com/tcnksm/ghr
      - run: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} .
      - store_artifacts:
          path: MagicOnion.Client.Unity.unitypackage
          destination: MagicOnion.Client.Unity.unitypackage
      - store_artifacts:
          path: moc.zip
          destination: moc.zip
  # android build
  build-unity-chatapp-android:
    executor: macos
    steps:
      # setup android sdk & ndk
      - run:
          name: install android sdk
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask
            HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk
            mkdir ~/.android && touch ~/.android/repositories.cfg
      - run: 
          command: |
            (yes | sdkmanager --licenses) || true
            (yes | sdkmanager --update) || true
      - run:
          name: install android ndk
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install md5sha1sum
            sudo curl --silent --show-error --location --fail --retry 3 \
              --output /tmp/android-ndk-r16b.zip \
              https://dl.google.com/android/repository/android-ndk-r16b-darwin-x86_64.zip

            sudo echo "e51e615449b98c716cf912057e2682e75d55e2de /tmp/android-ndk-r16b.zip" > /tmp/android-ndk-r16b.zip.sha1
            sha1sum -c /tmp/android-ndk-r16b.zip.sha1

            sudo unzip -q /tmp/android-ndk-r16b.zip -d /tmp/android
            sudo mv /tmp/android/android-ndk-r16b/ /usr/local/share/android-sdk/ndk-bundle
            sudo rm -f /tmp/android-ndk-r16b*
            sudo rm -rf /tmp/android

            sudo chown -R distiller:staff /usr/local/share/android-sdk
            sudo chown -R distiller:staff /usr/local/share/android-sdk/ndk-bundle

            echo "export ANDROID_SDK_ROOT=/usr/local/share/android-sdk" >> $BASH_ENV
            echo "export ANDROID_NDK_ROOT=/usr/local/share/android-sdk/ndk-bundle" >> $BASH_ENV
            source $BASH_ENV

            if [[ -d /usr/local/share/android-sdk/ndk-bundle && \
              -n "$(ls -A /usr/local/share/android-sdk/ndk-bundle)" ]]; then
              echo "Android NDK installed"
            else
              echo "Android NDK did not install successfully"
              exit 1
            fi
      - run: sdkmanager "cmake;3.10.2.4988404" "lldb;3.1"
      - run: sdkmanager "tools" "build-tools;28.0.3" "platforms;android-28" "platform-tools" "extras;android;m2repository"
      - run: sdkmanager --list
      # setup unity
      - run: sudo gem install u3d
      - restore_cache:
          keys:
            - unity-editor-2018.4.5f1-v1-
      - run: sudo u3d install 2018.4.5f1 --no-install
      - run: sudo u3d install 2018.4.5f1 --no-download
      - run: sudo u3d list | grep 2018.4.5f1
      - save_cache:
          key: unity-editor-2018.4.5f1-v1-
          paths:
            - /Users/distiller/Downloads/Unity_Packages/2018.4.5f1/Unity.pkg
          when: on_success
      - restore_cache:
          keys:
            - unity-android-2018.4.5f1-v1-
      - run: sudo u3d install 2018.4.5f1 --packages Android --no-install
      - run: sudo u3d install 2018.4.5f1 --packages Android --no-download
      - run: sudo u3d list -p | grep Android
      - save_cache:
          key: unity-android-2018.4.5f1-v1-
          paths:
            - /Users/distiller/Downloads/Unity_Packages/2018.4.5f1/UnitySetup-Android-Support-for-Editor-2018.4.5f1.pkg
          when: on_success
      # checkout and run unity build
      - git-shallow-clone/checkout_shallow
      - run:
          command: source $BASH_ENV && /Applications/Unity_2018.4.5f1/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -silent-crashes -logFile -noUpm -executeMethod BatchBuild.Build -platform android -locationpath ./build/chatapp.apk -serial ${UNITY_SERIAL} -username ${UNITY_USERNAME} -password ${UNITY_PASSWORD}
          working_directory: ./samples/ChatApp/ChatApp.Unity
      - run: 
          name: return license
          command: /Applications/Unity_2018.4.5f1/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -logFile /dev/null -returnlicense || exit 0
          when: always
      - store_artifacts:
          path: ./samples/ChatApp/ChatApp.Unity/build/
          destination: /samples/android/

  # Canary build and push NuGet
  canary-build-and-push-nuget:
    executor: dotnet
    steps:
      - git-shallow-clone/checkout_shallow
      - run: echo "export MAGICONION_VERSION=`echo ci-\`date '+%Y%m%d-%H%M%S'\`+${CIRCLE_SHA1:0:6}`" >> $BASH_ENV
      - run: echo "MAGICONION_VERSION=${MAGICONION_VERSION}"
      # build .NET Core projects
      - run: dotnet build ./src/MagicOnion/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.Hosting/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.HttpGateway/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.Redis/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.OpenTelemetry/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.MSBuild.Tasks/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.Generator/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Release -p:VersionSuffix=${MAGICONION_VERSION}
      # tests
      # - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Release
      # - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Release
      # pack nuget
      - run: dotnet pack ./src/MagicOnion/MagicOnion.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.Abstractions/MagicOnion.Abstractions.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.Hosting/MagicOnion.Hosting.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.HttpGateway/MagicOnion.HttpGateway.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.Redis/MagicOnion.Redis.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.OpenTelemetry/MagicOnion.OpenTelemetry.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.MSBuild.Tasks/MagicOnion.MSBuild.Tasks.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.Generator/MagicOnion.Generator.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      - run: dotnet pack ./src/MagicOnion.Server.Authentication/MagicOnion.Server.Authentication.csproj -c Release --include-symbols --include-source --no-build -p:VersionSuffix=${MAGICONION_VERSION}
      # publish moc
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r win-x64 -o ./src/MagicOnion.Generator/bin/moc/win-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r linux-x64 -o ./src/MagicOnion.Generator/bin/moc/linux-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r osx-x64 -o ./src/MagicOnion.Generator/bin/moc/osx-x64
      - run: apt update && apt install zip -y
      - run: zip -r moc.zip ./src/MagicOnion.Generator/bin/moc
      - store_artifacts:
          path: ./moc.zip

      # push to NuGet Server
      - run: echo "export NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED=true" >> $BASH_ENV
      - run: wget -qO- https://raw.githubusercontent.com/Microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh | bash
      - run: dotnet nuget push ./src/MagicOnion/bin/Release/MagicOnion.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.Abstractions/bin/Release/MagicOnion.Abstractions.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.Hosting/bin/Release/MagicOnion.Hosting.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.HttpGateway/bin/Release/MagicOnion.HttpGateway.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.Redis/bin/Release/MagicOnion.Redis.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.OpenTelemetry/bin/Release/MagicOnion.OpenTelemetry.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.MSBuild.Tasks/bin/Release/MagicOnion.MSBuild.Tasks.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.Generator/bin/Release/MagicOnion.Generator.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps
      - run: dotnet nuget push ./src/MagicOnion.Server.Authentication/bin/Release/MagicOnion.Server.Authentication.*.nupkg -s https://pkgs.dev.azure.com/cysharp/MagicOnion/_packaging/Canary/nuget/v2 -k AzureDevOps

  canary-push:
    executor: dotnet
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          path: MagicOnion.Client.Unity.unitypackage
          destination: MagicOnion.Client.Unity.unitypackage

workflows:
  version: 2
  build-and-push:
    jobs:
      - build-unity:
          filters:
            tags:
              only: /.*/
      - build-test:
          filters:
            tags:
              only: /.*/
      - build-push:
          context: cysharp-nuget
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/
      - upload-github:
          requires:
            - build-unity
            - build-push
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/
      # - build-unity-chatapp-android:
      #     filters:
      #       tags:
      #         only: /.*/

      - canary-build-and-push-nuget:
          filters:
            branches:
              only:
                - master
                - v3
      - canary-push:
          requires:
            - canary-build-and-push-nuget
            - build-unity
          filters:
            branches:
              only:
                - master
                - v3
