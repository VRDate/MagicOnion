name: build-release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*" # only tag

jobs:
  build-dotnet:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
      DOTNET_SDK_VERSION_3: "3.1.403"
      DOTNET_SDK_VERSION_5: "5.0.100"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "${{ env.DOTNET_SDK_VERSION_3 }}"
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "${{ env.DOTNET_SDK_VERSION_5 }}"
      # tag
      - run: echo "GIT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      # build
      - run: dotnet build ./src/MagicOnion/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Abstractions/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Shared/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Client/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Server/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Server.HttpGateway/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Server.Redis/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Server.Authentication/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      #- run: dotnet build ./src/MagicOnion.Server.OpenTelemetry/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.MSBuild.Tasks/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      - run: dotnet build ./src/MagicOnion.Generator/ -c Release -p:VersionPrefix=${{ env.GIT_TAG }}
      # test
      # - run: dotnet test ./tests/MagicOnion.NetCoreTests/ -c Release
      # - run: dotnet test ./tests/MagicOnion.Hosting.Tests/ -c Release
      # pack nuget
      - run: dotnet pack ./src/MagicOnion/MagicOnion.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Abstractions/MagicOnion.Abstractions.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Shared/MagicOnion.Shared.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Client/MagicOnion.Client.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Server/MagicOnion.Server.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Server.HttpGateway/MagicOnion.Server.HttpGateway.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Server.Redis/MagicOnion.Server.Redis.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Server.Authentication/MagicOnion.Server.Authentication.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      #- run: dotnet pack ./src/MagicOnion.Server.OpenTelemetry/MagicOnion.Server.OpenTelemetry.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.MSBuild.Tasks/MagicOnion.MSBuild.Tasks.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - run: dotnet pack ./src/MagicOnion.Generator/MagicOnion.Generator.csproj -c Release --no-build -p:VersionPrefix=${{ env.GIT_TAG }} -o ./publish
      - uses: actions/upload-artifact@v1
        with:
          name: nuget
          path: ./publish/
      # publish moc
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r win-x64 -o ./src/MagicOnion.Generator/bin/moc/win-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r linux-x64 -o ./src/MagicOnion.Generator/bin/moc/linux-x64
      - run: dotnet publish ./src/MagicOnion.Generator/ -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true /p:IncludeSymbolsInSingleFile=true --self-contained -r osx-x64 -o ./src/MagicOnion.Generator/bin/moc/osx-x64
      - run: zip -r moc.${{ env.GIT_TAG }}.zip ./src/MagicOnion.Generator/bin/moc
      - uses: actions/upload-artifact@v1
        with:
          name: moc.${{ env.GIT_TAG }}.zip
          path: ./moc.${{ env.GIT_TAG }}.zip

  build-unity:
    strategy:
      matrix:
        unity: ["2019.3.9f1"]
        include:
          - unity: 2019.3.9f1
            license: UNITY_2019_3
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      image: gableroux/unity3d:${{ matrix.unity }}-linux-il2cpp
    steps:
      - run: apt-get update && apt-get install git -y
      - uses: actions/checkout@v2
      # activate Unity from manual license file(ulf)
      - run: echo -n "$UNITY_LICENSE" >> .Unity.ulf
        env:
          UNITY_LICENSE: ${{ secrets[matrix.license] }}
      - name: Activate Unity, always returns a success. But if a subsequent run fails, the activation may have failed(if succeeded, shows `Next license update check is after` and not shows other message(like GUID != GUID). If fails not). In that case, upload the artifact's .alf file to https://license.unity3d.com/manual to get the .ulf file and set it to secrets.
        run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .Unity.ulf || exit 0

      - run: echo "GIT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # execute scripts/Export Package
      - name: Export unitypackage
        run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
        working-directory: src/MagicOnion.Client.Unity
        env:
          UNITY_PACKAGE_VERSION: ${{ env.GIT_TAG }}

      # Store artifacts.
      - uses: actions/upload-artifact@v1
        with:
          name: MagicOnion.Client.Unity.${{ env.GIT_TAG }}.unitypackage
          path: ./src/MagicOnion.Client.Unity/MagicOnion.Client.Unity.${{ env.GIT_TAG }}.unitypackage

  create-release:
    needs: [build-dotnet, build-unity]
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      NUGET_XMLDOC_MODE: skip
    steps:
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
      - run: echo "GIT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Ver.${{ github.ref }}
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v2-preview
      # Upload to NuGet
      - run: dotnet nuget push "./nuget/*.nupkg" --skip-duplicate -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      # Upload to Releases(generator)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./moc.${{ env.GIT_TAG }}.zip/moc.${{ env.GIT_TAG }}.zip
          asset_name: moc.${{ env.GIT_TAG }}.zip
          asset_content_type: application/octet-stream
      # Upload to Releases(unitypackage)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./MagicOnion.Client.Unity.${{ env.GIT_TAG }}.unitypackage/MagicOnion.Client.Unity.${{ env.GIT_TAG }}.unitypackage
          asset_name: MagicOnion.Client.Unity.unitypackage
          asset_content_type: application/octet-stream
