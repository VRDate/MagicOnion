// <auto-generated />
#pragma warning disable CS0618 // 'member' is obsolete: 'text'
#pragma warning disable CS0612 // 'member' is obsolete
#pragma warning disable CS8019 // Unnecessary using directive.

namespace MyNamespace
{
    partial class MagicOnionInitializer
    {
        static partial class MagicOnionGeneratedClient
        {
            [global::MagicOnion.Ignore]
            public class MyNamespace_MyServiceClient : global::MagicOnion.Client.MagicOnionClientBase<global::MyNamespace.IMyService>, global::MyNamespace.IMyService
            {
                class ClientCore
                {
                    public global::MagicOnion.Client.Internal.RawMethodInvoker<global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>, global::System.IO.FileMode, global::System.Linq.ILookup<global::System.String, global::System.String>, global::System.Net.Http.ClientCertificateOption, global::System.Threading.ApartmentState, global::System.Threading.Tasks.TaskCreationOptions>, global::MessagePack.Nil> A;
                    public ClientCore(global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider)
                    {
                        this.A = global::MagicOnion.Client.Internal.RawMethodInvoker.Create_ValueType_ValueType<global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>, global::System.IO.FileMode, global::System.Linq.ILookup<global::System.String, global::System.String>, global::System.Net.Http.ClientCertificateOption, global::System.Threading.ApartmentState, global::System.Threading.Tasks.TaskCreationOptions>, global::MessagePack.Nil>(global::Grpc.Core.MethodType.Unary, "IMyService", "A", serializerProvider);
                    }
                 }

                readonly ClientCore core;

                public MyNamespace_MyServiceClient(global::MagicOnion.Client.MagicOnionClientOptions options, global::MagicOnion.Serialization.IMagicOnionSerializerProvider serializerProvider) : base(options)
                {
                    this.core = new ClientCore(serializerProvider);
                }

                private MyNamespace_MyServiceClient(global::MagicOnion.Client.MagicOnionClientOptions options, ClientCore core) : base(options)
                {
                    this.core = core;
                }

                protected override global::MagicOnion.Client.MagicOnionClientBase<global::MyNamespace.IMyService> Clone(global::MagicOnion.Client.MagicOnionClientOptions options)
                    => new MyNamespace_MyServiceClient(options, core);

                public global::MagicOnion.UnaryResult<global::MessagePack.Nil> A(global::System.Int32 arg0, global::System.Collections.Generic.IReadOnlyList<global::System.Int32> arg1, global::System.IO.FileMode arg2, global::System.Linq.ILookup<global::System.String, global::System.String> arg3, global::System.Net.Http.ClientCertificateOption arg4, global::System.Threading.ApartmentState arg5, global::System.Threading.Tasks.TaskCreationOptions arg6)
                    => this.core.A.InvokeUnary(this, "IMyService/A", new global::MagicOnion.DynamicArgumentTuple<global::System.Int32, global::System.Collections.Generic.IReadOnlyList<global::System.Int32>, global::System.IO.FileMode, global::System.Linq.ILookup<global::System.String, global::System.String>, global::System.Net.Http.ClientCertificateOption, global::System.Threading.ApartmentState, global::System.Threading.Tasks.TaskCreationOptions>(arg0, arg1, arg2, arg3, arg4, arg5, arg6));
            }
        }
    }
}
