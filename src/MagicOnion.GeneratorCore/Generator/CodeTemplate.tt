<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MagicOnion.CodeAnalysis" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 219
#pragma warning disable 168

<#= Namespace != null ? ("namespace " + Namespace + " {") : "" #>
    using System;
    using MagicOnion;
    using MagicOnion.Client;
    using Grpc.Core;
    using MessagePack;
<# foreach(var interfaceDef in Interfaces) { #>

<# if(interfaceDef.IsIfDebug) { #>
#if DEBUG
<# } #>
<# var clientName = interfaceDef.ClientName; #>
    [Ignore]
    public class <#= clientName #> : MagicOnionClientBase<<#= interfaceDef.FullName #>>, <#= interfaceDef.FullName #>
    {
<# foreach(var item in interfaceDef.Methods) { #>
<# if(item.IsIfDebug) { #>
#if DEBUG
<# } #>
        static readonly Method<byte[], byte[]> <#= item.Name #>Method;
<# if(item.MethodType == MethodType.Unary) { #>
        static readonly Func<RequestContext, ResponseContext> <#= item.Name #>Delegate;
<# } #>
<# if(item.IsIfDebug) { #>
#endif
<# } #>
<# } #>

        static <#= clientName #>()
        {
<# foreach(var item in interfaceDef.Methods) { #>
<# if(item.IsIfDebug) { #>
#if DEBUG
<# } #>
            <#= item.Name #>Method = new Method<byte[], byte[]>(MethodType.<#= item.MethodType.ToString() #>, "<#= interfaceDef.Name #>", "<#= item.Name #>", MagicOnionMarshallers.ThroughMarshaller, MagicOnionMarshallers.ThroughMarshaller);
<# if(item.MethodType == MethodType.Unary) { #>
            <#= item.Name #>Delegate = _<#= item.Name #>;
<# } #>
<# if(item.IsIfDebug) { #>
#endif
<# } #>
<# } #>
        }

        <#= clientName #>()
        {
        }

        public <#= clientName #>(CallInvoker callInvoker, MessagePackSerializerOptions serializerOptions, IClientFilter[] filters)
            : base(callInvoker, serializerOptions, filters)
        {
        }

        protected override MagicOnionClientBase<<#= interfaceDef.Name #>> Clone()
        {
            var clone = new <#= clientName #>();
            clone.host = this.host;
            clone.option = this.option;
            clone.callInvoker = this.callInvoker;
            clone.serializerOptions = this.serializerOptions;
            clone.filters = filters;
            return clone;
        }

        public new <#= interfaceDef.Name #> WithHeaders(Metadata headers)
        {
            return base.WithHeaders(headers);
        }

        public new <#= interfaceDef.Name #> WithCancellationToken(System.Threading.CancellationToken cancellationToken)
        {
            return base.WithCancellationToken(cancellationToken);
        }

        public new <#= interfaceDef.Name #> WithDeadline(System.DateTime deadline)
        {
            return base.WithDeadline(deadline);
        }

        public new <#= interfaceDef.Name #> WithHost(string host)
        {
            return base.WithHost(host);
        }

        public new <#= interfaceDef.Name #> WithOptions(CallOptions option)
        {
            return base.WithOptions(option);
        }
   
<# foreach(var item in interfaceDef.Methods) { #>
<# if(item.IsIfDebug) { #>
#if DEBUG
<# } #>
<# if(item.MethodType == MethodType.Unary) { #>
        static ResponseContext _<#= item.Name #>(RequestContext __context)
        {
<# if(item.Parameters.Length == 0) { #>
            return CreateResponseContext<<#= item.ResponseType #>>(__context, <#= item.Name #>Method);
<# } else { #>
            return CreateResponseContext<<#= item.RequestMarshallerType #>, <#= item.ResponseType #>>(__context, <#= item.Name #>Method);
<# } #>
        }
<# } #>

        public <#= item.ToString() #>
        {
<# if(item.MethodType == MethodType.Unary) { #>
<# if(item.IsResponseTypeTaskOfT) { #>
            return InvokeTaskAsync<<#= item.RequestMarshallerType #>, <#= item.ResponseType #>>("<#= interfaceDef.Name + "/" + item.Name #>", <#= item.UnaryRequestObject #>, <#= item.Name #>Delegate);
<# } else { #>
            return InvokeAsync<<#= item.RequestMarshallerType #>, <#= item.ResponseType #>>("<#= interfaceDef.Name + "/" + item.Name #>", <#= item.UnaryRequestObject #>, <#= item.Name #>Delegate);
<# } #>
<# } else if(item.MethodType ==MethodType.ServerStreaming) { #>
            var __request = <#= item.RequestObject() #>;
            var __callResult = callInvoker.AsyncServerStreamingCall(<#= item.Name #>Method, base.host, base.option, __request);
            return System.Threading.Tasks.Task.FromResult(new ServerStreamingResult<<#= item.ResponseType #>>(__callResult, new MarshallingAsyncStreamReader<<#= item.ResponseType #>>(__callResult.ResponseStream, base.serializerOptions), base.serializerOptions));
<# } else if(item.MethodType ==MethodType.ClientStreaming) { #>
            var __callResult = callInvoker.AsyncClientStreamingCall<byte[], byte[]>(<#= item.Name #>Method, base.host, base.option);
            return System.Threading.Tasks.Task.FromResult(new ClientStreamingResult<<#= item.RequestType #>, <#= item.ResponseType #>>(__callResult, new MarshallingClientStreamWriter<<#= item.RequestType #>>(__callResult.RequestStream, serializerOptions), base.serializerOptions));
<# } else if(item.MethodType ==MethodType.DuplexStreaming) { #>
            var __callResult = callInvoker.AsyncDuplexStreamingCall<byte[], byte[]>(<#= item.Name #>Method, base.host, base.option);
            return System.Threading.Tasks.Task.FromResult(new DuplexStreamingResult<<#= item.RequestType #>, <#= item.ResponseType #>>(__callResult, new MarshallingClientStreamWriter<<#= item.RequestType #>>(__callResult.RequestStream, serializerOptions), new MarshallingAsyncStreamReader<<#= item.ResponseType #>>(__callResult.ResponseStream, base.serializerOptions), base.serializerOptions));
<# } #>
        }
<# if(item.IsIfDebug) { #>
#endif
<# } #>
<# } #>
    }
<# if(interfaceDef.IsIfDebug) { #>
#endif 
<# } #>
<# } #>
<#= Namespace != null ? "}" : "" #>

#pragma warning restore 168
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 612
#pragma warning restore 618